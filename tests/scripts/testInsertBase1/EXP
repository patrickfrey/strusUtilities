1
1 Software
1 123
1 1
1 2
1 3099
1:
	3 1 
1:
	4 16 
1:
	2 209 
1:
	9 409 
1:
	1 151 softwar
	5 1 introduct
	7 10 from
	8 1 wikipedia
	10 154 the
	11 9 free
	12 1 encyclopedia
	14 32 use
	15 5 e
	16 3 g
	17 2 php
	18 2 jump
	19 73 to
	21 1 navig
	23 2 search
	24 33 for
	25 14 other
	28 6 see
	31 1 disambigu
	34 69 a
	35 1 diagram
	36 2 show
	37 5 how
	39 26 user
	40 3 interact
	41 17 with
	42 29 applic
	44 20 on
	46 11 typic
	47 7 desktop
	48 52 comput
	53 2 layer
	54 5 interfac
	57 17 oper
	58 34 system
	60 27 which
	61 49 in
	62 1 turn
	63 2 communic
	66 8 hardwar
	69 1 arrow
	70 1 indic
	71 4 inform
	75 39 or
	76 1 simpli
	79 53 is
	80 38 that
	81 7 part
	82 86 of
	87 4 consist
	89 1 encod
	93 12 instruct
	96 1 contrast
	99 3 physic
	106 1 built
	109 1 content
	111 2 overview
	113 2 histori
	115 7 type
	118 3 purpos
	121 3 domain
	125 4 natur
	129 8 execut
	131 27 program
	132 9 tool
	136 1 topic
	137 2 architectur
	141 3 qualiti
	142 92 and
	143 2 reliabl
	145 8 licens
	147 17 patent
	150 14 design
	152 13 implement
	154 6 industri
	156 4 organ
	159 11 also
	161 2 refer
	163 1 external
	164 1 link
	170 6 term
	173 5 was
	174 4 first
	175 2 propos
	176 15 by
	177 2 alan
	178 3 ture
	182 10 this
	183 1 sens
	185 1 john
	186 1 w
	187 1 tukey
	191 4 scienc
	194 6 engin
	199 6 all
	201 3 process
	208 11 data
	212 12 includ
	216 6 librari
	218 4 relat
	219 3 non
	223 17 such
	224 30 as
	225 1 onlin
	226 1 document
	228 2 digit
	229 1 media
	235 7 requir
	236 6 each
	239 2 neither
	240 20 can
	241 32 be
	242 1 realist
	245 21 it
	246 4 own
	248 8 at
	250 1 lowest
	251 5 level
	254 6 code
	257 8 machin
	258 15 languag
	260 4 specif
	262 22 an
	263 3 individu
	264 7 processor
	267 1 central
	269 2 unit
	271 2 cpu
	279 2 group
	281 2 binari
	282 3 valu
	283 1 signifi
	287 5 chang
	289 4 state
	295 1 preced
	299 6 exampl
	303 12 may
	307 3 store
	310 3 particular
	311 2 storag
	312 1 locat
	317 4 effect
	320 8 not
	321 3 direct
	322 1 observ
	332 1 indirect
	334 3 caus
	335 1 someth
	337 1 appear
	340 1 display
	349 1 should
	351 1 visibl
	358 3 carri
	359 3 out
	364 3 order
	365 6 they
	366 32 are
	367 9 provid
	369 1 unless
	378 6 differ
	383 1 interrupt
	386 1 major
	390 9 written
	392 3 high
	398 3 easier
	400 11 more
	401 1 effici
	403 9 programm
	405 3 mean
	406 1 closer
	416 3 translat
	417 8 into
	422 5 compil
	425 2 interpret
	428 4 combin
	431 2 two
	440 1 low
	442 2 assembl
	445 2 essenti
	448 1 vagu
	449 1 mnemon
	450 1 represent
	459 1 alphabet
	475 1 outlin
	477 3 algorithm
	480 4 what
	481 2 would
	482 8 have
	483 5 been
	486 5 piec
	492 1 ada
	493 1 lovelac
	496 1 19th
	497 1 centuri
	501 1 plan
	502 2 analyt
	503 2 engine
	505 4 howev
	511 1 nor
	512 3 ani
	516 2 were
	517 3 ever
	518 8 creat
	522 1 theori
	523 3 about
	525 2 prior
	527 5 creation
	531 2 we
	532 1 know
	533 6 them
	534 1 today
	541 2 his
	542 2 essay
	544 2 number
	550 1 entscheidungsproblem
	552 1 decis
	553 1 problem
	557 1 eventu
	558 1 led
	564 1 twin
	565 1 academ
	566 2 field
	575 2 both
	576 1 studi
	586 2 theoret
	589 5 s
	599 1 wherea
	602 1 focus
	605 4 practic
	606 1 concern
	617 1 now
	618 1 understand
	624 4 memori
	630 1 did
	632 1 yet
	633 4 exist
	637 1 electron
	639 12 devic
	641 2 instead
	642 1 rewir
	647 1 reprogram
	656 1 virtual
	659 8 platform
	667 2 few
	668 1 broad
	669 2 categori
	671 6 applicat
	683 4 perform
	684 3 special
	685 12 function
	688 1 entertain
	690 1 beyond
	692 3 basic
	697 2 itself
	699 5 there
	701 12 mani
	708 4 becaus
	710 1 rang
	712 4 task
	719 3 modern
	722 7 so
	723 6 larg
	725 2 list
	747 7 need
	760 11 run
	768 1 operat
	774 2 collect
	778 2 manag
	779 1 resourc
	782 4 common
	783 2 servic
	791 2 top
	795 1 supervisori
	798 1 boot
	799 1 loader
	801 1 shell
	803 8 window
	806 1 core
	818 3 come
	819 3 bundl
	821 3 addit
	833 1 potenti
	834 7 do
	835 9 some
	836 3 work
	841 4 onli
	842 13 has
	849 4 driver
	854 2 control
	862 1 attach
	871 5 least
	872 11 one
	873 1 correspond
	883 1 minimum
	887 1 input
	893 2 output
	901 4 than
	907 1 utiliti
	915 1 assist
	919 1 mainten
	921 1 care
	923 6 their
	928 2 malici
	931 3 malwar
	938 11 develop
	940 1 harm
	942 1 disrupt
	950 1 undesir
	954 3 close
	955 2 associ
	959 1 crime
	961 2 though
	971 1 joke
	985 14 web
	986 8 browser
	988 13 microsoft
	989 3 office
	992 3 well
	994 2 smartphon
	996 1 tablet
	999 4 call
	1001 2 app
	1008 1 push
	1017 1 merg
	1021 2 mobil
	1026 1 extent
	1029 1 10
	1032 1 later
	1033 1 ubuntu
	1034 1 touch
	1036 1 tri
	1038 4 allow
	1040 1 same
	1041 1 style
	1052 1 laptop
	1058 4 javascript
	1059 3 script
	1064 1 tradit
	1065 11 embed
	1068 3 page
	1073 1 insid
	1077 3 when
	1082 3 load
	1083 2 without
	1090 4 plugin
	1102 2 within
	1106 6 if
	1110 3 either
	1122 3 support
	1126 1 instal
	1129 5 most
	1134 4 latter
	1136 1 actionscript
	1144 2 adobe
	1145 1 flash
	1149 4 server
	1157 7 usual
	1165 1 dynam
	1166 1 generat
	1178 1 java
	1180 1 asp
	1182 2 net
	1185 2 even
	1195 4 time
	1196 6 these
	1213 4 case
	1231 1 extens
	1235 1 extend
	1237 2 modifi
	1241 2 anoth
	1260 1 resid
	1262 2 firmwar
	1268 1 dedic
	1271 1 singl
	1279 1 car
	1281 1 televis
	1283 5 although
	1289 1 wireless
	1290 1 chipset
	1292 2 themselv
	1297 2 ordinari
	1306 2 pc
	1315 1 context
	1318 5 sometim
	1319 1 no
	1320 2 clear
	1321 3 distinct
	1322 6 between
	1345 1 retain
	1358 2 will
	1363 2 fix
	1368 1 alway
	1373 2 microcod
	1379 1 obscur
	1385 1 tell
	1398 3 actual
	1400 1 lower
	1409 2 proprietari
	1413 1 manufactur
	1417 1 necessari
	1418 1 correct
	1421 1 updat
	1423 1 suppli
	1431 5 much
	1432 1 cheaper
	1434 1 ship
	1435 1 replac
	1440 1 thus
	1446 1 expect
	1451 1 deal
	1467 6 form
	1477 3 known
	1481 2 coder
	1483 2 hacker
	1492 2 debug
	1494 1 maintain
	1496 2 i
	1499 1 improv
	1505 1 otherwis
	1542 1 set
	1552 2 self
	1553 3 contain
	1559 1 debugg
	1563 1 linker
	1566 1 text
	1567 1 editor
	1573 3 togeth
	1575 1 accomplish
	1584 3 integr
	1586 3 environ
	1588 4 ide
	1605 1 ides
	1611 1 invok
	1613 1 relev
	1618 1 re
	1624 1 new
	1625 1 way
	1630 3 make
	1642 1 file
	1646 2 project
	1654 1 option
	1668 12 often
	1670 3 thing
	1675 4 peopl
	1676 4 who
	1679 2 general
	1684 1 oppos
	1689 1 analog
	1692 1 supercomput
	1696 1 three
	1702 2 varieti
	1733 2 graphic
	1739 1 total
	1751 1 peripher
	1754 1 equip
	1774 1 abil
	1793 3 think
	1804 1 offic
	1805 1 suit
	1807 1 video
	1808 1 game
	1814 2 purchas
	1815 2 separ
	1828 2 but
	1830 2 doe
	1834 1 fact
	1839 2 independ
	1856 2 tailor
	1867 1 databas
	1882 1 end
	1888 1 meet
	1896 1 spreadsheet
	1897 2 templat
	1899 4 word
	1904 1 email
	1905 1 filter
	1908 1 kind
	1920 1 overlook
	1922 2 import
	1926 2 depend
	1929 1 compet
	1938 1 default
	1940 3 packag
	1947 1 awar
	1953 1 origin
	1960 1 ad
	1962 1 co
	1963 1 worker
	1985 1 hard
	1986 1 drive
	1991 1 once
	2000 1 abl
	2007 3 involv
	2008 1 pass
	2015 5 through
	2024 1 ultim
	2025 1 receiv
	2042 4 move
	2051 1 alter
	2054 1 flow
	2059 1 movement
	2064 1 place
	2078 1 regist
	2080 3 enabl
	2082 1 speed
	2084 1 access
	2092 2 especi
	2094 2 amount
	2100 2 cost
	2107 1 avoid
	2111 1 pointer
	2118 1 simpl
	2122 1 increment
	2127 1 variabl
	2129 2 element
	2132 2 complex
	2151 1 veri
	2156 2 commerci
	2160 9 like
	2167 1 linux
	2172 1 faulti
	2174 1 buggi
	2179 1 delet
	2181 3 person
	2185 1 crash
	2191 1 unexpect
	2194 1 fault
	2196 1 error
	2200 5 bug
	2204 2 discov
	2205 1 dure
	2206 1 alpha
	2208 1 beta
	2209 10 test
	2216 1 victim
	2223 1 age
	2226 1 progress
	2228 1 degrad
	2229 1 result
	2234 1 unseen
	2242 2 elimin
	2254 1 rare
	2258 2 everi
	2263 1 say
	2275 1 lubarski
	2277 1 law
	2282 1 waterfal
	2283 2 method
	2290 1 team
	2293 1 employ
	2297 1 newer
	2298 1 approach
	2302 1 agil
	2315 1 demonstr
	2320 1 client
	2321 1 regular
	2323 1 obtain
	2324 1 feedback
	2334 1 regress
	2342 1 done
	2343 1 manual
	2349 2 automat
	2351 2 sinc
	2361 2 quit
	2365 4 instanc
	2367 3 nasa
	2369 1 extrem
	2370 1 rigor
	2373 1 procedur
	2384 1 base
	2388 1 identifi
	2392 2 command
	2404 1 check
	2406 1 evalu
	2409 1 overal
	2434 2 give
	2438 5 right
	2458 2 grant
	2467 1 copi
	2473 1 divid
	2478 2 freewar
	2487 3 trial
	2491 3 freemium
	2496 1 past
	2500 1 sharewar
	2513 1 name
	2514 1 suggest
	2538 1 true
	2541 3 limit
	2542 1 period
	2552 1 avail
	2555 1 fee
	2558 1 inaccur
	2568 1 legal
	2577 5 open
	2578 5 sourc
	2584 1 hand
	2595 1 recipi
	2601 1 redistribut
	2619 4 suppos
	2623 1 inventor
	2625 1 exclus
	2632 1 detail
	2633 4 idea
	2652 1 compon
	2665 1 could
	2680 2 concret
	2704 1 alreadi
	2705 2 cover
	2707 1 copyright
	2720 1 middl
	2721 1 area
	2731 1 countri
	2737 2 claim
	2738 1 invent
	2746 4 world
	2760 1 held
	2761 1 valid
	2780 2 debat
	2785 3 controversi
	2793 1 hold
	2795 1 view
	2808 1 aforement
	2809 1 split
	2811 1 initi
	2817 1 seem
	2820 1 honor
	2825 2 lawyer
	2831 1 aspect
	2832 1 orient
	2835 2 aop
	2839 1 purport
	2843 1 over
	2853 1 howsoev
	2856 1 another
	2864 3 innov
	2868 1 distinguish
	2869 1 expert
	2871 6 compani
	2872 1 argu
	2878 1 fast
	2884 1 mere
	2886 1 vast
	2888 1 litig
	2891 1 risk
	2895 1 retard
	2906 1 outsid
	2908 1 unite
	2912 1 argument
	2915 1 made
	2918 1 american
	2919 1 corpor
	2928 1 primari
	2929 1 beneficiari
	2933 1 continu
	2949 1 vari
	2968 1 took
	2977 1 notepad
	2994 1 aka
	3007 1 eclips
	3009 1 intellij
	3012 1 visual
	3013 1 studio
	3016 1 simplifi
	3029 1 note
	3033 1 section
	3050 2 api
	3054 1 under
	3058 1 gtk
	3060 1 javabean
	3062 1 swing
	3066 6 apis
	3070 1 categor
	3079 1 spring
	3080 1 framework
	3085 1 enterpris
	3100 1 gui
	3109 1 commun
	3110 3 foundat
	3125 1 reli
	3126 1 upon
	3144 1 he
	3146 1 she
	3147 1 might
	3184 2 write
	3188 2 him
	3189 2 herself
	3212 2 oracl
	3232 1 numer
	3238 1 structur
	3241 1 hash
	3242 1 tabl
	3244 1 array
	3248 1 tree
	3254 1 quicksort
	3267 5 econom
	3268 1 characterist
	3277 1 distribut
	3283 1 good
	3306 1 similar
	3332 1 confus
	3342 1 someon
	3344 1 illeg
	3345 1 break
	3356 1 great
	3366 1 compris
	3376 2 profit
	3379 1 bill
	3380 1 gate
	3383 1 founder
	3388 1 richest
	3395 1 due
	3398 1 ownership
	3401 1 signific
	3404 1 share
	3410 1 respons
	3418 1 product
	3430 1 gnu
	3433 1 mozilla
	3437 3 standard
	3441 1 w3c
	3443 1 ietf
	3445 1 recommend
	3450 1 xml
	3452 1 http
	3454 1 html
	3460 1 interoper
	3474 1 novel
	3476 1 sap
	3478 1 symantec
	3484 1 corel
	3486 1 while
	3487 1 small
	3498 1 releas
	3499 1 life
	3500 1 cycl
	3507 1 asset
	3510 1 crystal
	3513 1 cdrom
	3514 1 unmount
	3516 1 png
	3518 2 portal
	3528 1 clipart
	3530 1 yellow
	3531 1 theme
	3533 1 svg
	3534 1 informat
	3535 2 technolog
	3543 1 construct
	3551 1 univers
	3553 1 mississippi
	3561 1 trend
	3563 1 ieee
	3565 1 societi
	3570 1 intellig
	3571 1 book
	3576 1 msdn
	3580 1 v
	3581 1 engelhardt
	3583 1 sebastian
	3585 1 xx
	3591 1 properti
	3595 1 jena
	3597 1 research
	3598 1 paper
	3601 1 kaminski
	3603 1 dan
	3605 1 whi
	3610 1 optimum
	3612 1 paradigm
1:
	1 1 softwar
1: Software Introduction From Wikipedia, the free encyclopedia, using e.g. PHP Jump to: navigation, search For other uses, see Software (disambiguation). A diagram showing how the user interacts with application software on a typical desktop computer.The application software layer interfaces with the operating system, which in turn communicates with the hardware. The arrows indicate information Computer software, or simply software, is that part of a computer system that consists of encoded information or computer instructions, in contrast to the physical hardware from which the system is built. Contents Overview History Types of software Purpose, or domain of use Nature or domain of execution Programming tools Software topics Architecture Execution Quality and reliability License Patents Design and implementation Industry and organizations See also References External links Overview The term "software" was first proposed by Alan Turing and used in this sense by John W. Tukey. In computer science and software engineering, computer software is all information processed by computer systems, programs and data. Computer software includes computer programs, libraries and related non-executable data, such as online documentation or digital media. Computer hardware and software require each other and neither can be realistically used on its own. At the lowest level, executable code consists of machine language instructions specific to an individual processor—typically a central processing unit (CPU). A machine language consists of groups of binary values signifying processor instructions that change the state of the computer from its preceding state. For example, an instruction may change the value stored in a particular storage location in the computer—an effect that is not directly observable to the user. An instruction may also (indirectly) cause something to appear on a display of the computer system—a state change which should be visible to the user. The processor carries out the instructions in the order they are provided, unless it is instructed to "jump" to a different instruction, or is interrupted. The majority of software is written in high-level programming languages that are easier and more efficient for programmers, meaning closer to a natural language. High-level languages are translated into machine language using a compiler or an interpreter or a combination of the two. Software may also be written in a low-level assembly language, essentially, a vaguely mnemonic representation of a machine language using a natural language alphabet, which is translated into machine language using an assembler. History An outline (algorithm) for what would have been the first piece of software was written by Ada Lovelace in the 19th century, for the planned Analytical Engine. However, neither the Analytical Engine nor any software for it were ever created. The first theory about software—prior to creation of computers as we know them today—was proposed by Alan Turing in his essay Computable numbers with an application to the Entscheidungsproblem (decision problem). This eventually led to the creation of the twin academic fields of computer science and software engineering, which both study software and its creation. Computer science is more theoretical (Turing's essay is an example of computer science), whereas software engineering focuses on more practical concerns. However, prior to this, software as we now understand it—programs stored in the memory of stored-program digital computers—did not yet exist. The first electronic computing devices were instead rewired in order to "reprogram" them. Types of software On virtually all computer platforms, software can be grouped into a few broad categories. Application software, which is software that uses the computer system to perform special functions or provide entertainment functions beyond the basic operation of the computer itself. There are many different types of application software, because the range of tasks that can be performed with a modern computer is so large—see list of software. System software, which is software that directly operates the computer hardware, to provide basic functionality needed by users and other software, and to provide a platform for running application software. System software includes: Operating systems, which are essential collections of software that manage resources and provides common services for other software that runs "on top" of them. Supervisory programs, boot loaders, shells and window systems are core parts of operating systems. In practice, an operating system comes bundled with additional software (including application software) so that a user can potentially do some work with a computer that only has an operating system. Device drivers, which operate or control a particular type of device that is attached to a computer. Each device needs at least one corresponding device driver; because a computer typically has at minimum at least one input device and at least one output device, a computer typically needs more than one device driver. Utilities, which are computer programs designed to assist users in the maintenance and care of their computers. Malicious software or malware, which is software that is developed to harm and disrupt computers. As such, malware is undesirable. Malware is closely associated with computer-related crimes, though some malicious programs may have been designed as practical jokes. Nature or domain of execution Desktop applications such as web browsers and Microsoft Office, as well as smartphone and tablet applications (called "apps"). (There is a push in some parts of the software industry to merge desktop applications with mobile apps, to some extent. Windows 10, and later Ubuntu Touch, tried to allow the same style of application user interface to be used on desktops, laptops and mobiles.) JavaScript scripts are pieces of software traditionally embedded in web pages that are run directly inside the web browser when a web page is loaded without the need for a web browser plugin. Software written in other programming languages can also be run within the web browser if the software is either translated into JavaScript, or if a web browser plugin that supports that language is installed; the most common example of the latter is ActionScript scripts, which are supported by the Adobe Flash plugin. Server software, including Web applications, which usually run on the web server and output dynamically generated web pages to web browsers, using e.g. PHP, Java, ASP.NET, or even JavaScript that runs on the server. In modern times these commonly include some JavaScript to be run in the web browser as well, in which case they typically run partly on the server, partly in the web browser. Plugins and extensions are software that extends or modifies the functionality of another piece of software, and require that software be used in order to function; Embedded software resides as firmware within embedded systems, devices dedicated to a single use or a few uses such as cars and televisions (although some embedded devices such as wireless chipsets can themselves be part of an ordinary, non-embedded computer system such as a PC or smartphone). In the embedded system context there is sometimes no clear distinction between the system software and the application software. However, some embedded systems run embedded operating systems, and these systems do retain the distinction between system software and application software (although typically there will only be one, fixed, application which is always run). Microcode is a special, relatively obscure type of embedded software which tells the processor itself how to execute machine code, so it is actually a lower level than machine code. It is typically proprietary to the processor manufacturer, and any necessary correctional microcode software updates are supplied by them to users (which is much cheaper than shipping replacement processor hardware). Thus an ordinary programmer would not expect to ever have to deal with it. Programming tools Programming tools are also software in the form of programs or applications that software developers (also known as programmers, coders, hackers or software engineers) use to create, debug, maintain (i.e. improve or fix), or otherwise support software. Software is written in one or more programming languages; there are many programming languages in existence, and each has at least one implementation, each of which consists of its own set of programming tools. These tools may be relatively self-contained programs such as compilers, debuggers, interpreters, linkers, and text editors, that can be combined together to accomplish a task; or they may form an integrated development environment (IDE), which combines much or all of the functionality of such self-contained tools. IDEs may do this by either invoking the relevant individual tools or by re-implementing their functionality in a new way. An IDE can make it easier to do specific tasks, such as searching in files in a particular project. Many programming language implementations provide the option of using both individual tools or an IDE. Architecture Users often see things differently from programmers. People who use modern general purpose computers (as opposed to embedded systems, analog computers and supercomputers) usually see three layers of software performing a variety of tasks: platform, application, and user software. Platform software: The Platform includes the firmware, device drivers, an operating system, and typically a graphical user interface which, in total, allow a user to interact with the computer and its peripherals (associated equipment). Platform software often comes bundled with the computer. On a PC one will usually have the ability to change the platform software. Application software: Application software or Applications are what most people think of when they think of software. Typical examples include office suites and video games. Application software is often purchased separately from computer hardware. Sometimes applications are bundled with the computer, but that does not change the fact that they run as independent applications. Applications are usually independent programs from the operating system, though they are often tailored for specific platforms. Most users think of compilers, databases, and other "system software" as applications. User-written software: End-user development tailors systems to meet users' specific needs. User software include spreadsheet templates and word processor templates. Even email filters are a kind of user software. Users create this software themselves and often overlook how important it is. Depending on how competently the user-written software has been integrated into default application packages, many users may not be aware of the distinction between the original packages, and what has been added by co-workers. Execution Computer software has to be "loaded" into the computer's storage (such as the hard drive or memory). Once the software has loaded, the computer is able to execute the software. This involves passing instructions from the application software, through the system software, to the hardware which ultimately receives the instruction as machine code. Each instruction causes the computer to carry out an operation—moving data, carrying out a computation, or altering the control flow of instructions. Data movement is typically from one place in memory to another. Sometimes it involves moving data between memory and registers which enable high-speed data access in the CPU. Moving data, especially large amounts of it, can be costly. So, this is sometimes avoided by using "pointers" to data instead. Computations include simple operations such as incrementing the value of a variable data element. More complex computations may involve many operations and data elements together. Quality and reliability Software quality is very important, especially for commercial and system software like Microsoft Office, Microsoft Windows and Linux. If software is faulty (buggy), it can delete a person's work, crash the computer and do other unexpected things. Faults and errors are called "bugs" which are often discovered during alpha and beta testing. Software is often also a victim to what is known as software aging, the progressive performance degradation resulting from a combination of unseen bugs. Many bugs are discovered and eliminated (debugged) through software testing. However, software testing rarely—if ever—eliminates every bug; some programmers say that "every program has at least one more bug" (Lubarsky's Law). In the waterfall method of software development, separate testing teams are typically employed, but in newer approaches, collectively termed agile software development, developers often do all their own testing, and demonstrate the software to users/clients regularly to obtain feedback. Software can be tested through unit testing, regression testing and other methods, which are done manually, or most commonly, automatically, since the amount of code to be tested can be quite large. For instance, NASA has extremely rigorous software testing procedures for many operating systems and communication functions. Many NASA-based operations interact and identify each other through command programs. This enables many people who work at NASA to check and evaluate functional systems overall. Programs containing command software enable hardware engineering and system operations to function much easier together. License The software's license gives the user the right to use the software in the licensed environment, and in the case of free software licenses, also grants other rights such as the right to make copies. Proprietary software can be divided into two types: freeware, which includes the category of "free trial" software or "freemium" software (in the past, the term shareware was often used for free trial/freemium software). As the name suggests, freeware can be used for free, although in the case of free trials or freemium software, this is sometimes only true for a limited period of time or with limited functionality. software available for a fee, often inaccurately termed "commercial software", which can only be legally used on purchase of a license. Open source software, on the other hand, comes with a free software license, granting the recipient the rights to modify and redistribute the software. Patents Software patents, like other types of patents, are theoretically supposed to give an inventor an exclusive, time-limited license for a detailed idea (e.g. an algorithm) on how to implement a piece of software, or a component of a piece of software. Ideas for useful things that software could do, and user requirements, are not supposed to be patentable, and concrete implementations (i.e. the actual software packages implementing the patent) are not supposed to be patentable either—the latter are already covered by copyright, generally automatically. So software patents are supposed to cover the middle area, between requirements and concrete implementation. In some countries, a requirement for the claimed invention to have an effect on the physical world may also be part of the requirements for a software patent to be held valid—although since all useful software has effects on the physical world, this requirement may be open to debate. Software patents are controversial in the software industry with many people holding different views about them. One of the sources of controversy is that the aforementioned split between initial ideas and patent does not seem to be honored in practice by patent lawyers—for example the patent for Aspect-Oriented Programming (AOP), which purported to claim rights over any programming tool implementing the idea of AOP, howsoever implemented. Another source of controversy is the effect on innovation, with many distinguished experts and companies arguing that software is such a fast-moving field that software patents merely create vast additional litigation costs and risks, and actually retard innovation. In the case of debates about software patents outside the United States, the argument has been made that large American corporations and patent lawyers are likely to be the primary beneficiaries of allowing or continue to allow software patents. Design and implementation Design and implementation of software varies depending on the complexity of the software. For instance, the design and creation of Microsoft Word took much more time than designing and developing Microsoft Notepad because the latter has much more basic functionality. Software is usually designed and created (aka coded/written/programmed) in integrated development environments (IDE) like Eclipse, IntelliJ and Microsoft Visual Studio that can simplify the process and compile the software (if applicable). As noted in a different section, software is usually created on top of existing software and the application programming interface (API) that the underlying software provides like GTK+, JavaBeans or Swing. Libraries (APIs) can be categorized by their purpose. For instance, the Spring Framework is used for implementing enterprise applications, the Windows Forms library is used for designing graphical user interface (GUI) applications like Microsoft Word, and Windows Communication Foundation is used for designing web services. When a program is designed, it relies upon the API. For instance, if a user is designing a Microsoft Windows desktop application, he or she might use the .NET Windows Forms library to design the desktop application and call its APIs like Form.Close() and Form.Show() to close or open the application, and write the additional operations him/herself that it needs to have. Without these APIs, the programmer needs to write these APIs him/herself. Companies like Oracle and Microsoft provide their own APIs so that many applications are written using their software libraries that usually have numerous APIs in them. Data structures such as hash tables, arrays, and binary trees, and algorithms such as quicksort, can be useful for creating software. Computer software has special economic characteristics that make its design, creation, and distribution different from most other economic goods. A person who creates software is called a programmer, software engineer or software developer, terms that all have a similar meaning. More informal terms for programmer also exist such as "coder" and "hacker" – although use of the latter word may cause confusion, because it is more often used to mean someone who illegally breaks into computer systems. Industry and organizations A great variety of software companies and programmers in the world comprise a software industry. Software can be quite a profitable industry: Bill Gates, the founder of Microsoft was the richest person in the world, largely due to his ownership of a significant number of shares in Microsoft, the company responsible for Microsoft Windows and Microsoft Office software products. Non-profit software organizations include the Free Software Foundation, GNU Project and Mozilla Foundation. Software standard organizations like the W3C, IETF develop recommended software standards such as XML, HTTP and HTML, so that software can interoperate through these standards. Other well-known large software companies include Oracle, Novell, SAP, Symantec, Adobe Systems, and Corel, while small companies often provide innovation. See also Software release life cycle List of software Software asset management Crystal Clear device cdrom unmount.png Software portal Free and open-source software Desktop computer clipart - Yellow theme.svg Information technology portal References "Compiler construction". "System Software". The University of Mississippi. "Embedded Software—Technologies and Trends". IEEE Computer Society. "scripting intelligence book examples". "MSDN Library". v. Engelhardt, Sebastian ([XX]). "The Economic Properties of Software". Jena Economic Research Papers. Kaminsky, Dan. "Why Open Source Is The Optimum Economic Paradigm for Software".
