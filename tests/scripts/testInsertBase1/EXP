1
1 Software
1 123
1 1
1 2
1 3099
1:
	3 1 
1:
	4 16 
1:
	2 212 
1:
	9 409 
1:
	1 151 softwar
	5 1 introduct
	7 10 from
	8 1 wikipedia
	10 154 the
	11 9 free
	12 1 encyclopedia
	14 32 use
	15 5 e
	16 3 g
	17 2 php
	18 2 jump
	19 73 to
	21 1 navig
	23 2 search
	24 33 for
	25 14 other
	28 6 see
	31 1 disambigu
	34 69 a
	35 1 diagram
	36 2 show
	37 5 how
	39 26 user
	40 3 interact
	41 17 with
	42 29 applic
	44 20 on
	46 11 typic
	47 7 desktop
	48 52 comput
	53 2 layer
	54 5 interfac
	57 17 oper
	58 34 system
	60 27 which
	61 49 in
	62 1 turn
	63 2 communic
	66 8 hardwar
	69 1 arrow
	70 1 indic
	71 4 inform
	75 39 or
	76 1 simpli
	79 53 is
	80 38 that
	81 7 part
	82 86 of
	87 4 consist
	89 1 encod
	93 12 instruct
	96 1 contrast
	99 3 physic
	106 1 built
	109 1 content
	111 2 overview
	113 2 histori
	115 7 type
	118 3 purpos
	121 3 domain
	125 4 natur
	129 8 execut
	131 27 program
	132 9 tool
	137 1 topic
	138 2 architectur
	142 3 qualiti
	143 92 and
	144 2 reliabl
	146 8 licens
	148 17 patent
	152 14 design
	154 13 implement
	156 6 industri
	158 4 organ
	161 11 also
	163 2 refer
	165 1 external
	166 1 link
	172 6 term
	175 5 was
	176 4 first
	177 2 propos
	178 15 by
	179 2 alan
	180 3 ture
	184 10 this
	185 1 sens
	187 1 john
	188 1 w
	189 1 tukey
	193 4 scienc
	196 6 engin
	201 6 all
	203 3 process
	210 11 data
	214 12 includ
	218 6 librari
	220 4 relat
	221 3 non
	225 17 such
	226 30 as
	227 1 onlin
	228 1 document
	230 2 digit
	231 1 media
	237 7 requir
	238 6 each
	241 2 neither
	242 20 can
	243 32 be
	244 1 realist
	247 21 it
	248 4 own
	250 8 at
	252 1 lowest
	253 5 level
	256 6 code
	259 8 machin
	260 15 languag
	262 4 specif
	264 22 an
	265 3 individu
	266 7 processor
	269 1 central
	271 2 unit
	273 2 cpu
	281 2 group
	283 2 binari
	284 3 valu
	285 1 signifi
	289 5 chang
	291 4 state
	297 1 preced
	301 6 exampl
	305 12 may
	309 3 store
	312 3 particular
	313 2 storag
	314 1 locat
	319 4 effect
	322 8 not
	323 3 direct
	324 1 observ
	334 1 indirect
	336 3 caus
	337 1 someth
	339 1 appear
	342 1 display
	351 1 should
	353 1 visibl
	360 3 carri
	361 3 out
	366 3 order
	367 6 they
	368 32 are
	369 9 provid
	371 1 unless
	380 6 differ
	385 1 interrupt
	388 1 major
	392 9 written
	394 3 high
	400 3 easier
	402 11 more
	403 1 effici
	405 9 programm
	407 3 mean
	408 1 closer
	418 3 translat
	419 8 into
	424 5 compil
	427 2 interpret
	430 4 combin
	433 2 two
	442 1 low
	444 2 assembl
	447 2 essenti
	450 1 vagu
	451 1 mnemon
	452 1 represent
	461 1 alphabet
	477 1 outlin
	479 3 algorithm
	482 4 what
	483 2 would
	484 8 have
	485 5 been
	488 5 piec
	494 1 ada
	495 1 lovelac
	498 1 19th
	499 1 centuri
	503 1 plan
	504 2 analyt
	505 2 engine
	507 4 howev
	513 1 nor
	514 3 ani
	518 2 were
	519 3 ever
	520 8 creat
	524 1 theori
	525 3 about
	527 2 prior
	529 5 creation
	533 2 we
	534 1 know
	535 6 them
	536 1 today
	543 2 his
	544 2 essay
	546 2 number
	552 1 entscheidungsproblem
	554 1 decis
	555 1 problem
	559 1 eventu
	560 1 led
	566 1 twin
	567 1 academ
	568 2 field
	577 2 both
	578 1 studi
	588 2 theoret
	591 5 s
	601 1 wherea
	604 1 focus
	607 4 practic
	608 1 concern
	619 1 now
	620 1 understand
	626 4 memori
	632 1 did
	634 1 yet
	635 4 exist
	639 1 electron
	641 12 devic
	643 2 instead
	644 1 rewir
	649 1 reprogram
	658 1 virtual
	661 8 platform
	669 2 few
	670 1 broad
	671 2 categori
	673 6 applicat
	685 4 perform
	686 3 special
	687 12 function
	690 1 entertain
	692 1 beyond
	694 3 basic
	699 2 itself
	701 5 there
	703 12 mani
	710 4 becaus
	712 1 rang
	714 4 task
	721 3 modern
	724 7 so
	725 6 larg
	727 2 list
	749 7 need
	762 11 run
	770 1 operat
	776 2 collect
	780 2 manag
	781 1 resourc
	784 4 common
	785 2 servic
	793 2 top
	797 1 supervisori
	800 1 boot
	801 1 loader
	803 1 shell
	805 8 window
	808 1 core
	820 3 come
	821 3 bundl
	823 3 addit
	835 1 potenti
	836 7 do
	837 9 some
	838 3 work
	843 4 onli
	844 13 has
	851 4 driver
	856 2 control
	864 1 attach
	873 5 least
	874 11 one
	875 1 correspond
	885 1 minimum
	889 1 input
	895 2 output
	903 4 than
	909 1 utiliti
	917 1 assist
	921 1 mainten
	923 1 care
	925 6 their
	931 2 malici
	934 3 malwar
	941 11 develop
	943 1 harm
	945 1 disrupt
	953 1 undesir
	957 3 close
	958 2 associ
	962 1 crime
	964 2 though
	974 1 joke
	988 14 web
	989 8 browser
	991 13 microsoft
	992 3 office
	995 3 well
	997 2 smartphon
	999 1 tablet
	1002 4 call
	1004 2 app
	1011 1 push
	1020 1 merg
	1024 2 mobil
	1029 1 extent
	1032 1 10
	1035 1 later
	1036 1 ubuntu
	1037 1 touch
	1039 1 tri
	1041 4 allow
	1043 1 same
	1044 1 style
	1055 1 laptop
	1061 4 javascript
	1062 3 script
	1067 1 tradit
	1068 11 embed
	1071 3 page
	1076 1 insid
	1080 3 when
	1085 3 load
	1086 2 without
	1093 4 plugin
	1105 2 within
	1109 6 if
	1113 3 either
	1125 3 support
	1129 1 instal
	1132 5 most
	1137 4 latter
	1139 1 actionscript
	1147 2 adobe
	1148 1 flash
	1152 4 server
	1160 7 usual
	1168 1 dynam
	1169 1 generat
	1181 1 java
	1183 1 asp
	1185 2 net
	1188 2 even
	1198 4 time
	1199 6 these
	1216 4 case
	1234 1 extens
	1238 1 extend
	1240 2 modifi
	1244 2 anoth
	1263 1 resid
	1265 2 firmwar
	1271 1 dedic
	1274 1 singl
	1282 1 car
	1284 1 televis
	1286 5 although
	1292 1 wireless
	1293 1 chipset
	1295 2 themselv
	1300 2 ordinari
	1309 2 pc
	1318 1 context
	1321 5 sometim
	1322 1 no
	1323 2 clear
	1324 3 distinct
	1325 6 between
	1348 1 retain
	1361 2 will
	1366 2 fix
	1371 1 alway
	1376 2 microcod
	1382 1 obscur
	1388 1 tell
	1401 3 actual
	1403 1 lower
	1412 2 proprietari
	1416 1 manufactur
	1420 1 necessari
	1421 1 correct
	1424 1 updat
	1426 1 suppli
	1434 5 much
	1435 1 cheaper
	1437 1 ship
	1438 1 replac
	1443 1 thus
	1449 1 expect
	1454 1 deal
	1470 6 form
	1480 3 known
	1484 2 coder
	1486 2 hacker
	1495 2 debug
	1497 1 maintain
	1499 2 i
	1502 1 improv
	1508 1 otherwis
	1545 1 set
	1555 2 self
	1556 3 contain
	1562 1 debugg
	1566 1 linker
	1569 1 text
	1570 1 editor
	1576 3 togeth
	1578 1 accomplish
	1587 3 integr
	1589 3 environ
	1591 4 ide
	1608 1 ides
	1614 1 invok
	1616 1 relev
	1621 1 re
	1627 1 new
	1628 1 way
	1633 3 make
	1645 1 file
	1649 2 project
	1657 1 option
	1671 12 often
	1673 3 thing
	1678 4 peopl
	1679 4 who
	1682 2 general
	1687 1 oppos
	1692 1 analog
	1695 1 supercomput
	1699 1 three
	1705 2 varieti
	1736 2 graphic
	1742 1 total
	1754 1 peripher
	1757 1 equip
	1777 1 abil
	1796 3 think
	1807 1 offic
	1808 1 suit
	1810 1 video
	1811 1 game
	1817 2 purchas
	1818 2 separ
	1831 2 but
	1833 2 doe
	1837 1 fact
	1842 2 independ
	1859 2 tailor
	1870 1 databas
	1885 1 end
	1891 1 meet
	1899 1 spreadsheet
	1900 2 templat
	1902 4 word
	1907 1 email
	1908 1 filter
	1911 1 kind
	1923 1 overlook
	1925 2 import
	1929 2 depend
	1932 1 compet
	1941 1 default
	1943 3 packag
	1950 1 awar
	1956 1 origin
	1963 1 ad
	1965 1 co
	1966 1 worker
	1988 1 hard
	1989 1 drive
	1994 1 once
	2003 1 abl
	2010 3 involv
	2011 1 pass
	2018 5 through
	2027 1 ultim
	2028 1 receiv
	2045 4 move
	2054 1 alter
	2057 1 flow
	2062 1 movement
	2067 1 place
	2081 1 regist
	2083 3 enabl
	2085 1 speed
	2087 1 access
	2095 2 especi
	2097 2 amount
	2103 2 cost
	2110 1 avoid
	2114 1 pointer
	2121 1 simpl
	2125 1 increment
	2130 1 variabl
	2132 2 element
	2135 2 complex
	2154 1 veri
	2159 2 commerci
	2163 9 like
	2170 1 linux
	2175 1 faulti
	2177 1 buggi
	2182 1 delet
	2184 3 person
	2188 1 crash
	2194 1 unexpect
	2197 1 fault
	2199 1 error
	2203 5 bug
	2207 2 discov
	2208 1 dure
	2209 1 alpha
	2211 1 beta
	2212 10 test
	2219 1 victim
	2226 1 age
	2229 1 progress
	2231 1 degrad
	2232 1 result
	2237 1 unseen
	2245 2 elimin
	2257 1 rare
	2261 2 everi
	2266 1 say
	2278 1 lubarski
	2280 1 law
	2285 1 waterfal
	2286 2 method
	2293 1 team
	2296 1 employ
	2300 1 newer
	2301 1 approach
	2305 1 agil
	2318 1 demonstr
	2323 1 client
	2324 1 regular
	2326 1 obtain
	2327 1 feedback
	2337 1 regress
	2345 1 done
	2346 1 manual
	2352 2 automat
	2354 2 sinc
	2364 2 quit
	2368 4 instanc
	2370 3 nasa
	2372 1 extrem
	2373 1 rigor
	2376 1 procedur
	2387 1 base
	2391 1 identifi
	2395 2 command
	2407 1 check
	2409 1 evalu
	2412 1 overal
	2437 2 give
	2441 5 right
	2461 2 grant
	2470 1 copi
	2476 1 divid
	2481 2 freewar
	2490 3 trial
	2494 3 freemium
	2499 1 past
	2503 1 sharewar
	2516 1 name
	2517 1 suggest
	2541 1 true
	2544 3 limit
	2545 1 period
	2555 1 avail
	2558 1 fee
	2561 1 inaccur
	2571 1 legal
	2580 5 open
	2581 5 sourc
	2587 1 hand
	2598 1 recipi
	2604 1 redistribut
	2622 4 suppos
	2626 1 inventor
	2628 1 exclus
	2635 1 detail
	2636 4 idea
	2655 1 compon
	2668 1 could
	2683 2 concret
	2707 1 alreadi
	2708 2 cover
	2710 1 copyright
	2723 1 middl
	2724 1 area
	2734 1 countri
	2740 2 claim
	2741 1 invent
	2749 4 world
	2763 1 held
	2764 1 valid
	2783 2 debat
	2788 3 controversi
	2796 1 hold
	2798 1 view
	2811 1 aforement
	2812 1 split
	2814 1 initi
	2820 1 seem
	2823 1 honor
	2828 2 lawyer
	2834 1 aspect
	2835 1 orient
	2838 2 aop
	2842 1 purport
	2846 1 over
	2856 1 howsoev
	2859 1 another
	2867 3 innov
	2871 1 distinguish
	2872 1 expert
	2874 6 compani
	2875 1 argu
	2881 1 fast
	2887 1 mere
	2889 1 vast
	2891 1 litig
	2894 1 risk
	2898 1 retard
	2909 1 outsid
	2911 1 unite
	2915 1 argument
	2918 1 made
	2921 1 american
	2922 1 corpor
	2931 1 primari
	2932 1 beneficiari
	2936 1 continu
	2952 1 vari
	2971 1 took
	2980 1 notepad
	2997 1 aka
	3010 1 eclips
	3012 1 intellij
	3015 1 visual
	3016 1 studio
	3019 1 simplifi
	3032 1 note
	3036 1 section
	3053 2 api
	3057 1 under
	3061 1 gtk
	3063 1 javabean
	3065 1 swing
	3069 6 apis
	3073 1 categor
	3082 1 spring
	3083 1 framework
	3088 1 enterpris
	3103 1 gui
	3112 1 commun
	3113 3 foundat
	3128 1 reli
	3129 1 upon
	3147 1 he
	3149 1 she
	3150 1 might
	3187 2 write
	3191 2 him
	3192 2 herself
	3215 2 oracl
	3235 1 numer
	3241 1 structur
	3244 1 hash
	3245 1 tabl
	3247 1 array
	3251 1 tree
	3257 1 quicksort
	3270 5 econom
	3271 1 characterist
	3280 1 distribut
	3286 1 good
	3309 1 similar
	3335 1 confus
	3345 1 someon
	3347 1 illeg
	3348 1 break
	3359 1 great
	3369 1 compris
	3379 2 profit
	3382 1 bill
	3383 1 gate
	3386 1 founder
	3391 1 richest
	3398 1 due
	3401 1 ownership
	3404 1 signific
	3407 1 share
	3413 1 respons
	3421 1 product
	3433 1 gnu
	3436 1 mozilla
	3440 3 standard
	3444 1 w3c
	3446 1 ietf
	3448 1 recommend
	3453 1 xml
	3455 1 http
	3457 1 html
	3463 1 interoper
	3477 1 novel
	3479 1 sap
	3481 1 symantec
	3487 1 corel
	3489 1 while
	3490 1 small
	3501 1 releas
	3502 1 life
	3503 1 cycl
	3510 1 asset
	3513 1 crystal
	3516 1 cdrom
	3517 1 unmount
	3519 1 png
	3521 2 portal
	3531 1 clipart
	3533 1 yellow
	3534 1 theme
	3536 1 svg
	3537 1 informat
	3538 2 technolog
	3546 1 construct
	3554 1 univers
	3556 1 mississippi
	3564 1 trend
	3566 1 ieee
	3568 1 societi
	3573 1 intellig
	3574 1 book
	3579 1 msdn
	3583 1 v
	3584 1 engelhardt
	3586 1 sebastian
	3588 1 xx
	3594 1 properti
	3598 1 jena
	3600 1 research
	3601 1 paper
	3604 1 kaminski
	3606 1 dan
	3608 1 whi
	3613 1 optimum
	3615 1 paradigm
1:
	1 1 softwar
1: Software Introduction From Wikipedia, the free encyclopedia, using e.g. PHP Jump to: navigation, search For other uses, see Software (disambiguation). A diagram showing how the user interacts with application software on a typical desktop computer.The application software layer interfaces with the operating system, which in turn communicates with the hardware. The arrows indicate information Computer software, or simply software, is that part of a computer system that consists of encoded information or computer instructions, in contrast to the physical hardware from which the system is built. Contents Overview History Types of software Purpose, or domain of use Nature or domain of execution Programming tools Software topics Architecture Execution Quality and reliability License Patents Design and implementation Industry and organizations See also References External links Overview The term "software" was first proposed by Alan Turing and used in this sense by John W. Tukey. In computer science and software engineering, computer software is all information processed by computer systems, programs and data. Computer software includes computer programs, libraries and related non-executable data, such as online documentation or digital media. Computer hardware and software require each other and neither can be realistically used on its own. At the lowest level, executable code consists of machine language instructions specific to an individual processor—typically a central processing unit (CPU). A machine language consists of groups of binary values signifying processor instructions that change the state of the computer from its preceding state. For example, an instruction may change the value stored in a particular storage location in the computer—an effect that is not directly observable to the user. An instruction may also (indirectly) cause something to appear on a display of the computer system—a state change which should be visible to the user. The processor carries out the instructions in the order they are provided, unless it is instructed to "jump" to a different instruction, or is interrupted. The majority of software is written in high-level programming languages that are easier and more efficient for programmers, meaning closer to a natural language. High-level languages are translated into machine language using a compiler or an interpreter or a combination of the two. Software may also be written in a low-level assembly language, essentially, a vaguely mnemonic representation of a machine language using a natural language alphabet, which is translated into machine language using an assembler. History An outline (algorithm) for what would have been the first piece of software was written by Ada Lovelace in the 19th century, for the planned Analytical Engine. However, neither the Analytical Engine nor any software for it were ever created. The first theory about software—prior to creation of computers as we know them today—was proposed by Alan Turing in his essay Computable numbers with an application to the Entscheidungsproblem (decision problem). This eventually led to the creation of the twin academic fields of computer science and software engineering, which both study software and its creation. Computer science is more theoretical (Turing's essay is an example of computer science), whereas software engineering focuses on more practical concerns. However, prior to this, software as we now understand it—programs stored in the memory of stored-program digital computers—did not yet exist. The first electronic computing devices were instead rewired in order to "reprogram" them. Types of software On virtually all computer platforms, software can be grouped into a few broad categories. Application software, which is software that uses the computer system to perform special functions or provide entertainment functions beyond the basic operation of the computer itself. There are many different types of application software, because the range of tasks that can be performed with a modern computer is so large—see list of software. System software, which is software that directly operates the computer hardware, to provide basic functionality needed by users and other software, and to provide a platform for running application software. System software includes: Operating systems, which are essential collections of software that manage resources and provides common services for other software that runs "on top" of them. Supervisory programs, boot loaders, shells and window systems are core parts of operating systems. In practice, an operating system comes bundled with additional software (including application software) so that a user can potentially do some work with a computer that only has an operating system. Device drivers, which operate or control a particular type of device that is attached to a computer. Each device needs at least one corresponding device driver; because a computer typically has at minimum at least one input device and at least one output device, a computer typically needs more than one device driver. Utilities, which are computer programs designed to assist users in the maintenance and care of their computers. Malicious software or malware, which is software that is developed to harm and disrupt computers. As such, malware is undesirable. Malware is closely associated with computer-related crimes, though some malicious programs may have been designed as practical jokes. Nature or domain of execution Desktop applications such as web browsers and Microsoft Office, as well as smartphone and tablet applications (called "apps"). (There is a push in some parts of the software industry to merge desktop applications with mobile apps, to some extent. Windows 10, and later Ubuntu Touch, tried to allow the same style of application user interface to be used on desktops, laptops and mobiles.) JavaScript scripts are pieces of software traditionally embedded in web pages that are run directly inside the web browser when a web page is loaded without the need for a web browser plugin. Software written in other programming languages can also be run within the web browser if the software is either translated into JavaScript, or if a web browser plugin that supports that language is installed; the most common example of the latter is ActionScript scripts, which are supported by the Adobe Flash plugin. Server software, including Web applications, which usually run on the web server and output dynamically generated web pages to web browsers, using e.g. PHP, Java, ASP.NET, or even JavaScript that runs on the server. In modern times these commonly include some JavaScript to be run in the web browser as well, in which case they typically run partly on the server, partly in the web browser. Plugins and extensions are software that extends or modifies the functionality of another piece of software, and require that software be used in order to function; Embedded software resides as firmware within embedded systems, devices dedicated to a single use or a few uses such as cars and televisions (although some embedded devices such as wireless chipsets can themselves be part of an ordinary, non-embedded computer system such as a PC or smartphone). In the embedded system context there is sometimes no clear distinction between the system software and the application software. However, some embedded systems run embedded operating systems, and these systems do retain the distinction between system software and application software (although typically there will only be one, fixed, application which is always run). Microcode is a special, relatively obscure type of embedded software which tells the processor itself how to execute machine code, so it is actually a lower level than machine code. It is typically proprietary to the processor manufacturer, and any necessary correctional microcode software updates are supplied by them to users (which is much cheaper than shipping replacement processor hardware). Thus an ordinary programmer would not expect to ever have to deal with it. Programming tools Programming tools are also software in the form of programs or applications that software developers (also known as programmers, coders, hackers or software engineers) use to create, debug, maintain (i.e. improve or fix), or otherwise support software. Software is written in one or more programming languages; there are many programming languages in existence, and each has at least one implementation, each of which consists of its own set of programming tools. These tools may be relatively self-contained programs such as compilers, debuggers, interpreters, linkers, and text editors, that can be combined together to accomplish a task; or they may form an integrated development environment (IDE), which combines much or all of the functionality of such self-contained tools. IDEs may do this by either invoking the relevant individual tools or by re-implementing their functionality in a new way. An IDE can make it easier to do specific tasks, such as searching in files in a particular project. Many programming language implementations provide the option of using both individual tools or an IDE. Architecture Users often see things differently from programmers. People who use modern general purpose computers (as opposed to embedded systems, analog computers and supercomputers) usually see three layers of software performing a variety of tasks: platform, application, and user software. Platform software: The Platform includes the firmware, device drivers, an operating system, and typically a graphical user interface which, in total, allow a user to interact with the computer and its peripherals (associated equipment). Platform software often comes bundled with the computer. On a PC one will usually have the ability to change the platform software. Application software: Application software or Applications are what most people think of when they think of software. Typical examples include office suites and video games. Application software is often purchased separately from computer hardware. Sometimes applications are bundled with the computer, but that does not change the fact that they run as independent applications. Applications are usually independent programs from the operating system, though they are often tailored for specific platforms. Most users think of compilers, databases, and other "system software" as applications. User-written software: End-user development tailors systems to meet users' specific needs. User software include spreadsheet templates and word processor templates. Even email filters are a kind of user software. Users create this software themselves and often overlook how important it is. Depending on how competently the user-written software has been integrated into default application packages, many users may not be aware of the distinction between the original packages, and what has been added by co-workers. Execution Computer software has to be "loaded" into the computer's storage (such as the hard drive or memory). Once the software has loaded, the computer is able to execute the software. This involves passing instructions from the application software, through the system software, to the hardware which ultimately receives the instruction as machine code. Each instruction causes the computer to carry out an operation—moving data, carrying out a computation, or altering the control flow of instructions. Data movement is typically from one place in memory to another. Sometimes it involves moving data between memory and registers which enable high-speed data access in the CPU. Moving data, especially large amounts of it, can be costly. So, this is sometimes avoided by using "pointers" to data instead. Computations include simple operations such as incrementing the value of a variable data element. More complex computations may involve many operations and data elements together. Quality and reliability Software quality is very important, especially for commercial and system software like Microsoft Office, Microsoft Windows and Linux. If software is faulty (buggy), it can delete a person's work, crash the computer and do other unexpected things. Faults and errors are called "bugs" which are often discovered during alpha and beta testing. Software is often also a victim to what is known as software aging, the progressive performance degradation resulting from a combination of unseen bugs. Many bugs are discovered and eliminated (debugged) through software testing. However, software testing rarely—if ever—eliminates every bug; some programmers say that "every program has at least one more bug" (Lubarsky's Law). In the waterfall method of software development, separate testing teams are typically employed, but in newer approaches, collectively termed agile software development, developers often do all their own testing, and demonstrate the software to users/clients regularly to obtain feedback. Software can be tested through unit testing, regression testing and other methods, which are done manually, or most commonly, automatically, since the amount of code to be tested can be quite large. For instance, NASA has extremely rigorous software testing procedures for many operating systems and communication functions. Many NASA-based operations interact and identify each other through command programs. This enables many people who work at NASA to check and evaluate functional systems overall. Programs containing command software enable hardware engineering and system operations to function much easier together. License The software's license gives the user the right to use the software in the licensed environment, and in the case of free software licenses, also grants other rights such as the right to make copies. Proprietary software can be divided into two types: freeware, which includes the category of "free trial" software or "freemium" software (in the past, the term shareware was often used for free trial/freemium software). As the name suggests, freeware can be used for free, although in the case of free trials or freemium software, this is sometimes only true for a limited period of time or with limited functionality. software available for a fee, often inaccurately termed "commercial software", which can only be legally used on purchase of a license. Open source software, on the other hand, comes with a free software license, granting the recipient the rights to modify and redistribute the software. Patents Software patents, like other types of patents, are theoretically supposed to give an inventor an exclusive, time-limited license for a detailed idea (e.g. an algorithm) on how to implement a piece of software, or a component of a piece of software. Ideas for useful things that software could do, and user requirements, are not supposed to be patentable, and concrete implementations (i.e. the actual software packages implementing the patent) are not supposed to be patentable either—the latter are already covered by copyright, generally automatically. So software patents are supposed to cover the middle area, between requirements and concrete implementation. In some countries, a requirement for the claimed invention to have an effect on the physical world may also be part of the requirements for a software patent to be held valid—although since all useful software has effects on the physical world, this requirement may be open to debate. Software patents are controversial in the software industry with many people holding different views about them. One of the sources of controversy is that the aforementioned split between initial ideas and patent does not seem to be honored in practice by patent lawyers—for example the patent for Aspect-Oriented Programming (AOP), which purported to claim rights over any programming tool implementing the idea of AOP, howsoever implemented. Another source of controversy is the effect on innovation, with many distinguished experts and companies arguing that software is such a fast-moving field that software patents merely create vast additional litigation costs and risks, and actually retard innovation. In the case of debates about software patents outside the United States, the argument has been made that large American corporations and patent lawyers are likely to be the primary beneficiaries of allowing or continue to allow software patents. Design and implementation Design and implementation of software varies depending on the complexity of the software. For instance, the design and creation of Microsoft Word took much more time than designing and developing Microsoft Notepad because the latter has much more basic functionality. Software is usually designed and created (aka coded/written/programmed) in integrated development environments (IDE) like Eclipse, IntelliJ and Microsoft Visual Studio that can simplify the process and compile the software (if applicable). As noted in a different section, software is usually created on top of existing software and the application programming interface (API) that the underlying software provides like GTK+, JavaBeans or Swing. Libraries (APIs) can be categorized by their purpose. For instance, the Spring Framework is used for implementing enterprise applications, the Windows Forms library is used for designing graphical user interface (GUI) applications like Microsoft Word, and Windows Communication Foundation is used for designing web services. When a program is designed, it relies upon the API. For instance, if a user is designing a Microsoft Windows desktop application, he or she might use the .NET Windows Forms library to design the desktop application and call its APIs like Form.Close() and Form.Show() to close or open the application, and write the additional operations him/herself that it needs to have. Without these APIs, the programmer needs to write these APIs him/herself. Companies like Oracle and Microsoft provide their own APIs so that many applications are written using their software libraries that usually have numerous APIs in them. Data structures such as hash tables, arrays, and binary trees, and algorithms such as quicksort, can be useful for creating software. Computer software has special economic characteristics that make its design, creation, and distribution different from most other economic goods. A person who creates software is called a programmer, software engineer or software developer, terms that all have a similar meaning. More informal terms for programmer also exist such as "coder" and "hacker" – although use of the latter word may cause confusion, because it is more often used to mean someone who illegally breaks into computer systems. Industry and organizations A great variety of software companies and programmers in the world comprise a software industry. Software can be quite a profitable industry: Bill Gates, the founder of Microsoft was the richest person in the world, largely due to his ownership of a significant number of shares in Microsoft, the company responsible for Microsoft Windows and Microsoft Office software products. Non-profit software organizations include the Free Software Foundation, GNU Project and Mozilla Foundation. Software standard organizations like the W3C, IETF develop recommended software standards such as XML, HTTP and HTML, so that software can interoperate through these standards. Other well-known large software companies include Oracle, Novell, SAP, Symantec, Adobe Systems, and Corel, while small companies often provide innovation. See also Software release life cycle List of software Software asset management Crystal Clear device cdrom unmount.png Software portal Free and open-source software Desktop computer clipart - Yellow theme.svg Information technology portal References "Compiler construction". "System Software". The University of Mississippi. "Embedded Software—Technologies and Trends". IEEE Computer Society. "scripting intelligence book examples". "MSDN Library". v. Engelhardt, Sebastian ([XX]). "The Economic Properties of Software". Jena Economic Research Papers. Kaminsky, Dan. "Why Open Source Is The Optimum Economic Paradigm for Software".
